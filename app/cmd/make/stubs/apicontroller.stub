package v1

import (
    "item-server/app/models/{{PackageName}}"
    "item-server/app/requests"
    "item-server/pkg/response"
	"item-server/app/http/resources"
    "github.com/gin-gonic/gin"
    optimusPkg "item-server/pkg/optimus"
    "github.com/spf13/cast"
)

type {{StructNamePlural}}Controller struct {
    BaseAPIController
}

func (ctrl *{{StructNamePlural}}Controller) Index(c *gin.Context) {

    requestFilter := requests.{{StructName}}FilterRequest{}
    if ok := requests.Validate(c, &requestFilter, requests.{{StructName}}Filter); !ok {
        return
    }
    request := requests.PaginationRequest{}
    if ok := requests.Validate(c, &request, requests.Pagination); !ok {
        return
    }

    data, pager := {{VariableName}}.Paginate(c, 10, &requestFilter)
    r := resources.{{StructName}}{ModelSlice: data}
    response.JSON(c, gin.H{
        "data":   r.IndexResource(),
        "pager": pager,
    })
}

func (ctrl *{{StructNamePlural}}Controller) Show(c *gin.Context) {
    id := cast.ToUint64(c.Param("id"))
	if ok := helpers.IdVerify(id); !ok {
		return
	}
    {{VariableName}}Model := {{PackageName}}.FindById(optimusPkg.NewOptimus().Decode(id))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }
    r := resources.{{StructName}}{Model: &{{VariableName}}Model}
    response.Data(c, r.ShowResource())
}

func (ctrl *{{StructNamePlural}}Controller) Store(c *gin.Context) {

    request := requests.{{StructName}}Request{}
    if ok := requests.Validate(c, &request, requests.{{StructName}}Save); !ok {
        return
    }

    {{VariableName}}Model := {{PackageName}}.{{StructName}}{
        FieldName:      request.FieldName,
    }
    {{VariableName}}Model.Create()
    if {{VariableName}}Model.ID > 0 {
        model :=  {{PackageName}}.FindById({{VariableName}}Model.ID)
        r := resources.{{StructName}}{Model: &model}
        response.Created(c, r.ShowResource())
    } else {
        response.Abort500(c, "创建失败，请稍后尝试~")
    }
}

func (ctrl *{{StructNamePlural}}Controller) Update(c *gin.Context) {

    id := cast.ToUint64(c.Param("id"))
	if ok := helpers.IdVerify(id); !ok {
		return
	}

    {{VariableName}}Model := {{PackageName}}.FindById(optimusPkg.NewOptimus().Decode(id))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }

    request := requests.{{StructName}}Request{}
    if ok := requests.Validate(c, &request, requests.{{StructName}}Save); !ok {
        return
    }

    {{VariableName}}Model.FieldName = request.FieldName
    rowsAffected := {{VariableName}}Model.Save(&request)
    if rowsAffected > 0 {
        model :=  {{PackageName}}.FindById({{VariableName}}Model.ID)
        r := resources.{{StructName}}{Model: &model}
        response.Data(c,r.ShowResource())
    } else {
        response.Abort500(c, "更新失败，请稍后尝试~")
    }
}

func (ctrl *{{StructNamePlural}}Controller) Delete(c *gin.Context) {

	id := cast.ToUint64(c.Param("id"))
	if ok := helpers.IdVerify(id); !ok {
		return
	}

    {{VariableName}}Model := {{PackageName}}.FindById(optimusPkg.NewOptimus().Decode(id))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }

    if ok := policies.CanModify{{StructName}}(c, {{VariableName}}Model); !ok {
        response.Abort403(c)
        return
    }

    rowsAffected := {{VariableName}}Model.Delete()
    if rowsAffected > 0 {
        response.Success(c)
        return
    }

    response.Abort500(c, "删除失败，请稍后尝试~")
}